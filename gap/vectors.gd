# Commands that return lists of vectors:
#!
#! Spin(rep, list of lists of vectors)
#! returns a basis for the subrepresentation generated by the vectors in the lists.
#! There is one entry in the list (of lists of vectors) for each object in the category,
#! and it is a list of vectors which all belong to the representation space at that object.
#!
#! CatSpin is called by Spin(rep, list of lists of vectors) when rep is a
#! category representation.
#!
#! This is code which was developed from code written by
#! Fan Zhang (University of Minnesota), March 2011.
DeclareGlobalFunction( "Spin" );
DeclareGlobalFunction( "CatSpin" );

#! CoSpin(rep, list of lists of vectors) . . returns a list
#! of bases for the largest subrepresentation contained in
#! the spaces spanned by the vectors in the lists.
#!
#! CoSpin(rep, veclist) . . .returns a basis for the largest submodule
#! contained in the vector subspace spanned by veclist.
#!
#! GroupCoSpin is called by CoSpin(rep, veclist) when rep is a
#! group representation.
#!
DeclareGlobalFunction( "CoSpin" );
DeclareGlobalFunction( "CatCoSpin" );

#! SumOfImages(rep,rep) . . returns a list of bases which give the sum of images of all 
#! module homomorphisms A -> B. Term i in the list is a basis for the subspace of the 
#! value of representation B at object i which is part of the sum of images.
#!
#! CatSumOfImages is called by SumOfImages(rep,rep) when rep is a
#! category representation.
DeclareGlobalFunction( "SumOfImages" );
DeclareGlobalFunction( "CatSumOfImages" );

#! Decompose(rep) . . returns a list of lists of bases.
#! Each list of bases determines a direct summand of the
#! representation, which is their direct sum.
#! The summands are probably indecomposable.
#!
#! Decompose(rep) . . returns a list of basis structures of direct summands of rep which
#! are probably indecomposable.
#!
#! DecomposeCatRep is called by Decompose(rep) when rep is a category representation.
#!
#! This code was developed by Peter Webb from code for group representations
#! written by Bryan Simpkins and Robert Hank, University of
#! Minnesota, April 2006, related to an approach taken by Michael Smith in
#! code written in 1993, and tidied up by Dan Christensen, University of Western Ontario, Aug 2007.
#!

DeclareGlobalFunction( "Decompose" );
DeclareGlobalFunction( "DecomposeCatRep" );

#! DecomposeSubmodule(repn, basis structure) . . probably returns a list of two basis 
#! structures for summands of the submodule of repn spanned by 
#! the given basis structure, if the module is decomposable, and
#! if the module is indecomposable it returns a list whose only element is the
#! given basis.
#!
#! CatDecomposeSubmodule is called by DecomposeSubmodule(repn, basis structure) when repn is a
#! category representation.
#!
#! This code was developed by Peter Webb from code for group representations
#! written by Bryan Simpkins and Robert Hank, University of
#! Minnesota, April 2006, related to an approach taken by Michael Smith in
#! code written in 1993, and tidied up by Dan Christensen, University of Western Ontario, Aug 2007.
#!
#!
#! DecomposeSubmodule(repn, basis) . . probably returns a list of two bases 
#! for summands of 
#! the submodule of repn spanned by basis, if the module is decomposable, and
#! if the module is indecomposable it returns a list whose only element is the
#! given basis.
#!
#! GroupDecomposeSubmodule is called by DecomposeSubmodule(repn, basis) when repn
#! is a group representation.
#!
#! This code was written by Bryan Simpkins and Robert Hank, University of
#! Minnesota, April 2006. A related approach was taken by Michael Smith in
#! code written in 1993.
#! It was tidied up by Dan Christensen, University of Western Ontario, Aug 2007.
#! In July 2016 Craig Corsi, University of Minnesota, made a change so that
#! decompositions over fields larger than the field of definition of the 
#! representation are found.
DeclareGlobalFunction( "DecomposeSubmodule" );
DeclareGlobalFunction( "CatDecomposeSubmodule" );

#! SubConstant(rep) returns a list of bases for the largest 
#! subconstant subrepresentation of rep. It calls routines
#! MorphismsRep and GeneratorDomains.
#!
#! SubConstant(rep) returns a list of bases for the largest subconstant
#! representation of rep. The algorithm finds the common kernel of all differences
#! of morphisms from a domain to all codomains.
#!
#! Written by Moriah Elkin August 2018.
DeclareGlobalFunction( "SubConstant" );
